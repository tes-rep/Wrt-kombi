name: Generate RTA-WRT All Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.1"
        type: choice
        options:
          - openwrt:24.10.1
          - openwrt:23.05.5
          - immortalwrt:24.10.1
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: false
        default: "all-device"
        type: choice
        options:
          - all-device
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - x86-64
          - OPHUB Amlogic s905
          - OPHUB Amlogic s905 Beelink Mini
          - OPHUB Amlogic s905 MXQ Pro Plus
          - OPHUB Amlogic s905W
          - OPHUB Amlogic s905W W95
          - OPHUB Amlogic s905W X96 Mini
          - OPHUB Amlogic s905W X96W
          - OPHUB Amlogic s905X HG680P
          - OPHUB Amlogic s905X B860H
          - OPHUB Amlogic s905X Nexbox A95X
          - OPHUB Amlogic s905X2
          - OPHUB Amlogic s905X2 KM3
          - OPHUB Amlogic s905X2 X96 Max 2G
          - OPHUB Amlogic s905X3
          - OPHUB Amlogic s905X3 H96 Max
          - OPHUB Amlogic s905X3 HK1
          - OPHUB Amlogic s905X3 X96 Max
          - OPHUB Amlogic s912
          - OPHUB Amlogic s912 H96 Pro Plus
          - OPHUB Amlogic s912 X92
          - OPHUB Rockchip rk3318 H96-MAX
          - ULO Amlogic s905X HG680P
          - ULO Amlogic s905X B860H
          - ULO Amlogic s905X2
          - ULO Amlogic s905X3
          - ULO Amlogic s905X4
          - ULO Allwinner H5 Orange Pi Zero Plus2
          - ULO Allwinner H5 Orange Pi Zero Plus
          - ULO Allwinner H5 Orange Pi Prime
          - ULO Allwinner H5 Orange Pi PC2
          - ULO Allwinner H6 Orange Pi Lite2
          - ULO Allwinner H6 Orange Pi 1 Plus
          - ULO Allwinner H6 Orange Pi 3
          - ULO Allwinner H6 Orange Pi 3 LTS
          - ULO Allwinner H616 Orange Pi Zero2
          - ULO Allwinner H618 Orange Pi Zero2W
          - ULO Allwinner H618 Orange Pi Zero3
          - ULO Rockchip rk3566 Orange Pi 3B
          - ULO Rockchip rk3588s Orange Pi 5
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "all-tunnel"
        type: choice
        options:
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: true
        type: boolean
      notify:
        description: "Send notification to Telegram"
        required: false
        default: true
        type: boolean

env:
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive
  RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
  TARGET: ${{ github.event.inputs.target }}
  TUNNEL: ${{ github.event.inputs.tunnel }}
  CLEAN: ${{ github.event.inputs.clean }}

jobs:
  prebuild:
    continue-on-error: false
    runs-on: ubuntu-22.04
    name: ${{ github.event.inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
      base: ${{ steps.setupenv.outputs.base }}
      branch: ${{ steps.setupenv.outputs.branch }}
      verop: ${{ steps.setupenv.outputs.verop }}
      download_base: ${{ steps.setupenv.outputs.download_base }}
      date: ${{ steps.setupenv.outputs.date }}
      datetime: ${{ steps.setupenv.outputs.datetime }}
      datemonth: ${{ steps.setupenv.outputs.datemonth }}
      release_name: ${{ steps.setupenv.outputs.release_name }}
      release_tag: ${{ steps.setupenv.outputs.release_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set Matrix Run
        id: set-matrix
        run: |
          echo "Selected target option: [ ${{ github.event.inputs.target }} ]"
          TARGET_JSON=$(cat << 'EOJ'
          {
            "target": [
              "Raspberry Pi 3B",
              "Raspberry Pi 4B",
              "x86-64",
              "OPHUB Amlogic s905",
              "OPHUB Amlogic s905 Beelink Mini",
              "OPHUB Amlogic s905 MXQ Pro Plus",
              "OPHUB Amlogic s905W",
              "OPHUB Amlogic s905W W95",
              "OPHUB Amlogic s905W X96 Mini",
              "OPHUB Amlogic s905W X96W",
              "OPHUB Amlogic s905X HG680P",
              "OPHUB Amlogic s905X B860H",
              "OPHUB Amlogic s905X Nexbox A95X",
              "OPHUB Amlogic s905X2",
              "OPHUB Amlogic s905X2 KM3",
              "OPHUB Amlogic s905X2 X96 Max 2G",
              "OPHUB Amlogic s905X3",
              "OPHUB Amlogic s905X3 H96 Max",
              "OPHUB Amlogic s905X3 HK1",
              "OPHUB Amlogic s905X3 X96 Max",
              "OPHUB Amlogic s912",
              "OPHUB Amlogic s912 H96 Pro Plus",
              "OPHUB Amlogic s912 X92",
              "OPHUB Rockchip rk3318 H96-MAX",
              "ULO Amlogic s905X HG680P",
              "ULO Amlogic s905X B860H",
              "ULO Amlogic s905X2",
              "ULO Amlogic s905X3",
              "ULO Amlogic s905X4",
              "ULO Allwinner H5 Orange Pi Zero Plus2",
              "ULO Allwinner H5 Orange Pi Zero Plus",
              "ULO Allwinner H5 Orange Pi Prime",
              "ULO Allwinner H5 Orange Pi PC2",
              "ULO Allwinner H6 Orange Pi Lite2",
              "ULO Allwinner H6 Orange Pi 1 Plus",
              "ULO Allwinner H6 Orange Pi 3",
              "ULO Allwinner H6 Orange Pi 3 LTS",
              "ULO Allwinner H616 Orange Pi Zero2",
              "ULO Allwinner H618 Orange Pi Zero2W",
              "ULO Allwinner H618 Orange Pi Zero3",
              "ULO Rockchip rk3566 Orange Pi 3B",
              "ULO Rockchip rk3588s Orange Pi 5"
            ]
          }
          EOJ
          )

          if [ "${{ github.event.inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$TARGET_JSON" | jq -c '.target')" >> $GITHUB_OUTPUT
          else
            echo "target=$(jq -nc --arg d "${{ github.event.inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

          echo "Selected tunnel option: [ ${{ github.event.inputs.tunnel }} ]"

      - name: Setup Release Environment
        id: setupenv
        run: |
          sudo timedatectl set-timezone "${{ env.TZ }}"

          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "VEROP=$VEROP" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_OUTPUT

          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "DATETIME=$DATETIME" >> $GITHUB_OUTPUT
          echo "DATEMONTH=$DATEMONTH" >> $GITHUB_OUTPUT

          if [ "${BASE}" == "openwrt" ]; then
            RELEASE_NAME="RTA-WRT-OpenWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-openwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          else
            RELEASE_NAME="RTA-WRT-ImmortalWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-immortalwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.setupenv.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.setupenv.outputs.release_tag }}
          name: ${{ steps.setupenv.outputs.release_name }}
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # üöÄ RTA-WRT - Release Information

            ## üì• Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ steps.setupenv.outputs.release_tag }}/total?style=for-the-badge&logo=Openwrt)

            ## üì¢ Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt)
            [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt)
            [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`

            ## üìù Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/${{ github.ref_name }}/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true

  build-firmware:
    name: Build ${{ matrix.target }} Firmware
    needs: prebuild
    runs-on: ubuntu-22.04
    continue-on-error: true
    env:
      BASE: ${{ needs.prebuild.outputs.base }}
      BRANCH: ${{ needs.prebuild.outputs.branch }}
      VEROP: ${{ needs.prebuild.outputs.verop }}
      DOWNLOAD_BASE: ${{ needs.prebuild.outputs.download_base }}
      DATE: ${{ needs.prebuild.outputs.date }}
      DATETIME: ${{ needs.prebuild.outputs.datetime }}
      DATEMONTH: ${{ needs.prebuild.outputs.datemonth }}
      RELEASE_NAME: ${{ needs.prebuild.outputs.release_name }}
      RELEASE_TAG: ${{ needs.prebuild.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Initialization environment
        id: init
        run: |
          # docker rmi $(docker images -q) 2>/dev/null
          # [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # sudo swapoff -a
          # sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          # sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          # sudo -E systemctl daemon-reload
          # sudo -E apt-get -y autoremove --purge
          # sudo -E apt-get clean
          # sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          # sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${{ env.TZ }}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          MATRIXTARGET="${{ matrix.target }}"
          echo "MATRIXTARGET=$MATRIXTARGET" >> $GITHUB_ENV
          NAMA_MODIFIED=$(echo $MATRIXTARGET | sed 's/ /-/g')
          echo "NAMA_MODIFIED=$NAMA_MODIFIED" >> $GITHUB_ENV

          # Set OpenWrt base
          case $BASE in
            openwrt)     OP_BASE="OpenWrt" ;;
            immortalwrt) OP_BASE="ImmortalWrt" ;;
          esac
          echo "OP_BASE=$OP_BASE" >> $GITHUB_ENV

          # Common configuration function
          configure_target() {
            local profile=$1 target_system=$2 target_name=$3 arch1=$4 arch2=$5 arch3=$6 type=$7
            echo "PROFILE=$profile" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=$target_system" >> $GITHUB_ENV
            echo "TARGET_NAME=$target_name" >> $GITHUB_ENV
            echo "ARCH_1=$arch1" >> $GITHUB_ENV
            echo "ARCH_2=$arch2" >> $GITHUB_ENV
            echo "ARCH_3=$arch3" >> $GITHUB_ENV
            echo "TYPE=$type" >> $GITHUB_ENV
          }

          # Configure OPHUB/ULO common settings
          configure_arm_device() {
            local target_build=$1 kernel=$2 type=$3
            echo "TARGET_BUILD=$target_build" >> $GITHUB_ENV
            echo "KERNEL=$kernel" >> $GITHUB_ENV
            configure_target "generic" "armsr/armv8" "armsr-armv8" "arm64" "aarch64" "aarch64_generic" $type
          }

          # Handle device configurations
          case "$MATRIXTARGET" in
            # Standard devices
            "Raspberry Pi 3B")
              configure_target "rpi-3" "bcm27xx/bcm2710" "bcm27xx-bcm2710" "armv7" "aarch64" "aarch64_cortex-a53" "NON-REPACK"
              ;;
            "Raspberry Pi 4B")
              configure_target "rpi-4" "bcm27xx/bcm2711" "bcm27xx-bcm2711" "arm64" "aarch64" "aarch64_cortex-a72" "NON-REPACK"
              ;;
            "x86-64")
              configure_target "generic" "x86/64" "x86-64" "amd64" "x86_64" "x86_64" "NON-REPACK"
              ;;
              
            # OPHUB Amlogic devices
            "OPHUB Amlogic s905")
              configure_arm_device "s905" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905 Beelink Mini")
              configure_arm_device "s905-beelink-mini" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905 MXQ Pro Plus")
              configure_arm_device "s905-mxqpro-plus" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905W")
              configure_arm_device "s905w" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905W W95")
              configure_arm_device "s905w-w95" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905W X96 Mini")
              configure_arm_device "s905w-x96-mini" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905W X96W")
              configure_arm_device "s905w-x96w" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X HG680P")
              configure_arm_device "s905x" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X B860H")
              configure_arm_device "s905x-b860h" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X Nexbox A95X")
              configure_arm_device "s905x-nexbox-a95x" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X2")
              configure_arm_device "s905x2" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X2 KM3")
              configure_arm_device "s905x2-km3" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X2 X96 Max 2G")
              configure_arm_device "s905x2-x96max-2g" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X3")
              configure_arm_device "s905x3" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X3 H96 Max")
              configure_arm_device "s905x3-h96max" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X3 HK1")
              configure_arm_device "s905x3-hk1" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s905X3 X96 Max")
              configure_arm_device "s905x3-x96max" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s912")
              configure_arm_device "s912" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s912 H96 Pro Plus")
              configure_arm_device "s912-h96pro-plus" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Amlogic s912 X92")
              configure_arm_device "s912-x92" "5.15.y_6.1.y" "OPHUB"
              ;;
            "OPHUB Rockchip rk3318 H96-MAX")
              configure_arm_device "rk3318-box" "6.1.y" "OPHUB"
              ;;
              
            # ULO Amlogic devices
            "ULO Amlogic s905X HG680P")
              configure_arm_device "s905x" "6.1.66-DBAI" "ULO"
              ;;
            "ULO Amlogic s905X B860H")
              configure_arm_device "s905x" "6.1.66-DBAI" "ULO"
              ;;
            "ULO Amlogic s905X2")
              configure_arm_device "s905x2" "6.1.66-DBAI" "ULO"
              ;;
            "ULO Amlogic s905X3")
              configure_arm_device "s905x3" "6.1.66-DBAI" "ULO"
              ;;
            "ULO Amlogic s905X4")
              configure_arm_device "s905x4" "6.1.66-DBAI" "ULO"
              ;;
              
            # ULO Allwinner devices
            "ULO Allwinner H5 Orange Pi Zero Plus2")
              configure_arm_device "h5-orangepi-zeroplus2" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H5 Orange Pi Zero Plus")
              configure_arm_device "h5-orangepi-zeroplus" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H5 Orange Pi Prime")
              configure_arm_device "h5-orangepi-prime" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H5 Orange Pi PC2")
              configure_arm_device "h5-orangepi-pc2" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H6 Orange Pi Lite2")
              configure_arm_device "h6-orangepi-lite2" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H6 Orange Pi 1 Plus")
              configure_arm_device "h6-orangepi-1plus" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H6 Orange Pi 3")
              configure_arm_device "h6-orangepi-3" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H6 Orange Pi 3 LTS")
              configure_arm_device "h6-orangepi-3lts" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H616 Orange Pi Zero2")
              configure_arm_device "h616-orangepi-zero2" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H618 Orange Pi Zero2W")
              configure_arm_device "h618-orangepi-zero2w" "6.1.31-AW64-DBAI" "ULO"
              ;;
            "ULO Allwinner H618 Orange Pi Zero3")
              configure_arm_device "h618-orangepi-zero3" "6.1.31-AW64-DBAI" "ULO"
              ;;
              
            # ULO Rockchip devices
            "ULO Rockchip rk3566 Orange Pi 3B")
              configure_arm_device "rk3566-orangepi-3b" "5.10.160-rk35v-dbai" "ULO"
              ;;
            "ULO Rockchip rk3588s Orange Pi 5")
              configure_arm_device "rk3588s-orangepi-5" "5.10.160-rk35v-dbai" "ULO"
              ;;
          esac

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension based on version
          CURVER=$(echo "${BRANCH}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${DOWNLOAD_BASE}/releases/${BRANCH}/targets/${TARGET_SYSTEM}/${BASE}-imagebuilder-${BRANCH}-${TARGET_NAME}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive based on extension
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${WORKING_DIR}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${WORKING_DIR}

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          ./scripts/TUNNEL.sh ${{ env.TUNNEL }}

          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          mkdir -p compiled_images
          chmod +x make-image.sh

          # Clean if requested
          if [ "${CLEAN}" == "true" ]; then
            make clean
          fi
            
          # Build image
          time ./make-image.sh ${PROFILE} ${{ env.TUNNEL }}
            
          # Move and rename output files
          if [[ "$TYPE" =~ ^(OPHUB|ULO)$ ]]; then
              for file in bin/targets/"${TARGET_SYSTEM}"/*-rootfs.tar.gz; do
                if [ -f "$file" ]; then
                  new_name="RTA-WRT_$(basename "$file" -rootfs.tar.gz)_${{ env.TUNNEL }}-rootfs.tar.gz"
                  mv "$file" compiled_images/$new_name
                fi
              done
          else
              for file in bin/targets/"${TARGET_SYSTEM}"/*.img.gz; do
                if [ -f "$file" ]; then
                  new_name="RTA-WRT_$(basename "$file" .img.gz)_${{ env.TUNNEL }}.img.gz"
                  mv "$file" compiled_images/$new_name
                fi
              done
          fi


          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Repack OpenWrt
        id: repack
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/REPACKWRT.sh
          echo "Repacking OpenWrt images ${TYPE}..."
          if [[ "$TYPE" =~ ^(OPHUB|ULO)$ ]]; then
            ./scripts/REPACKWRT.sh "$TYPE" "$TARGET_BUILD" "$KERNEL" "${{ env.TUNNEL }}"
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Mod SDCard
        id: modsdcard
        if: steps.repack.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/MODSDCARD.sh
          if [[ "$TYPE" =~ ^(OPHUB|ULO)$ ]]; then
            ./scripts/MODSDCARD.sh
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Before Upload
        id: beforeupload
        if: steps.modsdcard.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/RENAMEFW.sh
          ./scripts/RENAMEFW.sh
          echo "status=success" >> "$GITHUB_OUTPUT"

      - name: Create Release
        if: steps.beforeupload.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.img.gz
          prerelease: ${{ github.ref_name == 'dev' }}

      - name: Upload file links as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-links-${{ matrix.target }}
          path: /home/runner/work/RTA-WRT/RTA-WRT/imagebuilder/compiled_images//artifacts.txt

      - name: Clean Storage
        run: |
          sudo rm -rf ${{ env.WORKING_DIR }}

  notify:
    name: Notify Release
    if: github.event.inputs.notify == 'true'
    continue-on-error: false
    needs: [prebuild, build-firmware]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Download file links as artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          mkdir -p artifacts
          find artifacts -name "artifacts.txt" -exec cat {} \; > combined_artifacts.txt

          # Check if combined_artifacts.txt exists and has content
          if [ ! -s combined_artifacts.txt ]; then
            echo "No artifacts found or empty artifacts file"
            echo "::warning::No firmware artifacts were found to notify about"
            exit 1
          else
            echo "Artifacts found, proceeding with notification"
          fi

          cat combined_artifacts.txt

      - name: Kirim Notifikasi Telegram
        run: |
          chmod +x ./telegram_notify.sh
          ./telegram_notify.sh
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          THREAD_ID: ${{ secrets.THREAD_ID }}
          SOURCE: ${{ needs.prebuild.outputs.base }}
          VERSION: ${{ needs.prebuild.outputs.branch }}
          BUILD_TYPE: ${{ env.TUNNEL }}
          FOR: ${{ github.ref_name }}
          RELEASE_TAG: ${{ needs.prebuild.outputs.release_tag }}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
  
      - name: Deploy to pages branch
        run: |
          git checkout --orphan pages
          git rm -rf .
          cp ../${{ github.ref_name }}/firmware.html index.html
          git add index.html
          git commit -m "Deploy firmware.html as index.html"
          git push origin pages --force
