#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description:   Build OpenWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================

name: Build OpenWrt amlogic
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:24.10.0-rc7"
        type: choice
        options:
          - immortalwrt:24.10.0-rc3
          - openwrt:23.05.5
          - openwrt:24.10.0-rc3
          - openwrt:24.10.0-rc7
      target:
        description: "Select device target:"
        required: true
        default: "s905x4"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - s905x
          - s905x4
          - s905x2
          - s905x3
      rootfs_size:
         description: "ROOTFS SIZE 512 640 768 1024"
         required: true
         default: '1024'
         type: string 
      type_file:
        description: "Select type file"
        required: false
        default: "tar.gz"
        type: choice
        options:
          - tar.gz
          - zip    
      kernel:
        description: 'Kernel Version (ex. 6.6.6, 6.1.31-localversion)'
        required: true
        default: '6.6.66'
        type: string
      versi:
        description: "Pilih ULO / ULO2"
        required: true
        default: "ulo2"     
        type: choice
        options:
          - ulo
          - ulo2
      fwinfo:
        description: 'Firmware Information'
        required: false
        default: "imagebuilder.sh"
        type: choice
        options:
          - imagebuilder.sh
          - imagebuilderA.sh
          - imagebuilderB.sh
      rename_rootfs:
        description: "ganti nama rootfs"
        required: false
        default: ""     
        type: string     
      kernel_url:
        description: "Set the url kernel file"
        required: false
        default: ""     
        type: string    


env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: ${{ inputs.fwinfo }}
jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
            echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64','Amlogic HG680P','Amlogic B860H-V5','Amlogic B860H-V1-V2']" >> $GITHUB_OUTPUT
          else
            echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
  build:
    needs: prebuild
    runs-on: ubuntu-20.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialization environment (normal)
        # if: github.event.inputs.target != 'all' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install lolcat build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo apt-get -qq install jq python3 python3-pip
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          pip install telethon
          pip install colorama
          sudo pip3 install gdown
          sudo pip3 install git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_20.04_amd64.deb"
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo -e "[\033[94m INFO \033[0m] TARGET: ${{ matrix.target }}"
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Setup Environment Variables
        id: init
        run: |
          if [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "TARGET_NAME=rpi-3" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-3" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "TARGET_NAME=rpi-4" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-4" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2C" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r2c" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2c" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2S" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2s" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R4S" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r4s" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r4s" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus" ]; then
            echo "TARGET_NAME=xunlong_orangepi-r1-plus" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_xunlong_orangepi-r1-plus" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus LTS" ]; then
            echo "TARGET_NAME=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_xunlong_xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
          elif [ "$TARGET" == "x86-64" ]; then
            echo "TARGET_NAME=generic" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "s905x" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x" >> $GITHUB_ENV
          elif [ "$TARGET" == "s905x4" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x" >> $GITHUB_ENV  
          elif [ "$TARGET" == "s905x3" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x-b860h" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x-b860h" >> $GITHUB_ENV
          elif [ "$TARGET" == "s905x2" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x2" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x2" >> $GITHUB_ENV
          fi
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"


      - name: Build Rootfs [ ${{ inputs.releases_branch }} ]
        id: imagebuilder
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          TARGET_NAME="${{ env.TARGET_NAME }}"
          RELEASES_BRANCH="${{ inputs.releases_branch }}"${RELEASES_BRANCH%:*}
          chmod +x ${IMAGEBUILDER_SH}
          bash ${IMAGEBUILDER_SH} ${RELEASES_BRANCH} "${{ env.TARGET_NAME }}"
          echo "RELEASES_TAG=${RELEASES_BRANCH/:/_}" >> ${GITHUB_ENV}
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"
  
      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd imagebuilder
          rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Prepare file First
        run: |
          cd imagebuilder
          echo -e "[\033[95m STEPS \033[0m] Prepare File.."
          mkdir -p compiled_images_${{ env.TAG_NAME }}
          if [[ "${{ env.TARGET_NAME }}" != "amlogic" ]]; then
            for file in bin/targets/*/*/*.img.gz; do mv "$file" compiled_images_${{ env.TAG_NAME }}; done
          else
            for file in bin/targets/*/*/*rootfs.tar.gz; do mv "$file" /home/runner/work/Wrt-kombi/Wrt-kombi/rootfs/${{ inputs.rename_rootfs }}.tar.gz; done
          fi
          echo -e "INFO files list: \n$(ls -l compiled_images_${{ env.TAG_NAME }} 2>/dev/null)"

      - name: Mengatur tanggal
        id: date
        run: echo "date=$(date +'%d-%m-%y %H:%M:%S')" >> $GITHUB_OUTPUT
  
      - name: Download kernel
        run: |
           if [ $(echo ${{ github.event.inputs.kernel_url }} | grep "drive.") ]; then
           if [ $(echo ${{ github.event.inputs.kernel_url }} | awk -F "/" '{print $6}') ]; then
            link_gdrive=$(echo ${{ github.event.inputs.kernel_url }} | awk -F "/" '{print $6}')
           else
            link_gdrive=$(echo ${{ github.event.inputs.kernel_url }} | awk -F "/" '{print $4}' | awk -F "?id=" '{print $2}'|awk -F "&export" '{print $1}')
           fi
           sudo gdown ${link_gdrive} -O build/file.${{ github.event.inputs.type_file }}
           else
           if [ $(echo ${{ github.event.inputs.kernel_url }} | grep "mediafire.com") ]; then
            sudo mediafire-dl ${{ github.event.inputs.kernel_url }} -o build/file.${{ github.event.inputs.type_file }}
            else
            if [ $(echo ${{ github.event.inputs.kernel_url }} | grep "mega.nz") ]; then
              file_mega=$(sudo mega-get ${{ github.event.inputs.kernel_url }} | awk -F: '{print $2}')
              sudo mv ${file_mega} build/file.${{ github.event.inputs.type_file }}
            else
              sudo wget --no-check-certificate ${{ github.event.inputs.kernel_url }} -O build/file.${{ github.event.inputs.type_file }}
            fi
           fi
           fi    
      - name: Extract kernel
        id: kernel
        run: |  
             cd build
             if [ ${{ github.event.inputs.type_file }} = "tar.gz" ]; then
             tar -xzvf file.tar.gz -C /home/runner/work/Wrt-kombi/Wrt-kombi/core/kernel
             # cd core/kernel/* && rm -rf dtb-rockchip-*.tar.gz && rm -rf dtb-allwinner-*.tar.gz
             else
             unzip file.zip -d /home/runner/work/Wrt-kombi/Wrt-kombi/core/kernel
             fi
      - name: Building OpenWrt
        run: |
          sudo chmod +x ulo2
          sudo chmod +x ulo
          sudo ./${{ inputs.versi }} -m ${{ inputs.target }} -k ${{ inputs.kernel }} -s ${{ inputs.rootfs_size }}
          
      - name: Creating Package Artifact
        run: |
          mkdir -p ./artifact
          cp -rf ./out/${{ inputs.target }}/* ./artifact/
         # cp -rf ./rootfs/*.tar.gz ./artifact/
          
      - name: Delivering Package
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_package
          path: ./artifact/*
          
      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          tag: ${{ inputs.target }}
          file_glob: true
          overwrite: true
          body: |
            ##  OpenWRT Release for ${{ inputs.target }} devices
            ULO-Builder Release from Github Workflow
            ### OpenWrt Image Information
            - Firmware Details : 
              - Tanggal Build: ${{ steps.date.outputs.date }}
              - Devices type : ${{ inputs.target }}
              - Kernel version : ${{ inputs.kernel }}
              - ROOTFS File : ${{ inputs.rename_rootfs }}
              - ROOTFS Size : ${{ inputs.rootfs_size }}
            ## OpenWrt Image information
              - Default IP: 192.168.1.1
              - Default username: root
              - Default password: sijitekowolu
              - Default WIFI name: NOKIA N73 | NOKIA N73
              - Default WIFI password: sijitekowolu   
      - name: Retry Upload if Failed
        if: ${{ failure() }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          tag: ${{ inputs.target }}
          file_glob: true
          overwrite: true
          body: |
            ##  OpenWRT Release for ${{ inputs.target }} devices
            ULO-Builder Release from Github Workflow
            ### OpenWrt Image Information
            - Firmware Details : 
              - Tanggal Build: ${{ steps.date.outputs.date }}
              - Devices type : ${{ inputs.target }}
              - Kernel version : ${{ inputs.kernel }}
              - ROOTFS File : ${{ inputs.rename_rootfs }}
              - ROOTFS Size : ${{ inputs.rootfs_size }}
             ### OpenWrt Image information
              - Default IP: 192.168.1.1
              - Default username: root
              - Default password: sijitekowolu
              - Default WIFI name: NOKIA N73 | NOKIA N73
              - Default WIFI password: sijitekowolu 
        
