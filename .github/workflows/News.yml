#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description:   Build OpenWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================

name: Build new

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:24.10.1"
        type: choice
        options:
          - immortalwrt:24.10.1
          - immortalwrt:23.05.4
          - openwrt:24.10.1
          - openwrt:23.05.5
  
      target:
        description: "Select device Target"
        required: true
        default: "Amlogic AT01"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - Amlogic HG680P
          - Amlogic B860H-V5
          - Amlogic B860H-V1-V2
          - Amlogic AT01
          - Amlogic HG680-FJ
          - Amlogic AT01_Amlogic HG680P
      rootfs_size:
        description: "ROOTFS Size, (512, 640, 756, 1024)"
        required: true
        default: "1024"
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.6.y_6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
          - 6.6.y_6.12.y
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "tes-rep/kernel"
        type: choice
        options:
          - ophub/kernel
          - Houjie80/kernel2
          - tes-rep/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - s905x4
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      fwinfo:
        description: 'Firmware Information'
        required: false
        default: "imagebuilderA.sh"
        type: choice
        options:
          - imagebuilder.sh
          - imagebuilderA.sh
          - imagebuilderB.sh  


env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: ${{ inputs.fwinfo }}

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
            echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64','Amlogic HG680P','Amlogic B860H-V5','Amlogic AT01','Amlogic B860H-V1-V2']" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.target }}" == "Amlogic AT01_Amlogic HG680P" ]; then  
            echo "target=['Amlogic AT01','Amlogic HG680P']" >> $GITHUB_OUTPUT
          else
            echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment (normal)
        # if: github.event.inputs.target != 'all' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo apt-get -qq install jq python3 python3-pip
          #sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          # sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo -e "[\033[94m INFO \033[0m] TARGET: ${{ matrix.target }}"
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Setup Environment Variables
        id: init
        run: |
          if [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "TARGET_NAME=rpi-3" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-3" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "TARGET_NAME=rpi-4" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-4" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2C" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r2c" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2c" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2S" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2s" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R4S" ]; then
            echo "TARGET_NAME=friendlyarm_nanopi-r4s" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_friendlyarm_nanopi-r4s" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus" ]; then
            echo "TARGET_NAME=xunlong_orangepi-r1-plus" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_xunlong_orangepi-r1-plus" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus LTS" ]; then
            echo "TARGET_NAME=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_xunlong_xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
          elif [ "$TARGET" == "x86-64" ]; then
            echo "TARGET_NAME=generic" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "Amlogic HG680P" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x" >> $GITHUB_ENV
          elif [ "$TARGET" == "Amlogic B860H-V5" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x2-b860h-v5" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x-b860h" >> $GITHUB_ENV
          elif [ "$TARGET" == "Amlogic B860H-V1-V2" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x2" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x2" >> $GITHUB_ENV
          elif [ "$TARGET" == "Amlogic AT01" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x4-advan" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x4" >> $GITHUB_ENV
          elif [ "$TARGET" == "Amlogic HG680-FJ" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s905x2-hg680-fj" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s905x2-hg680-fj" >> $GITHUB_ENV 
          elif [ "$TARGET" == "s922x" ]; then
            echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
            echo "openwrt_board=s922x-ugoos-am6" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_amlogic_s922x" >> $GITHUB_ENV   
          fi
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"

      - name: Mengatur tanggal
        id: date
        run: echo "date=$(date +'%d-%m-%y %H:%M:%S')" >> $GITHUB_OUTPUT
        
      - name: Build Rootfs [ ${{ inputs.releases_branch }} ]
        id: imagebuilder
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          TARGET_NAME="${{ env.TARGET_NAME }}"
          RELEASES_BRANCH="${{ inputs.releases_branch }}"${RELEASES_BRANCH%:*}
          chmod +x ${IMAGEBUILDER_SH}
          bash ${IMAGEBUILDER_SH} ${RELEASES_BRANCH} "${{ env.TARGET_NAME }}"
          echo "RELEASES_TAG=${RELEASES_BRANCH/:/_}" >> ${GITHUB_ENV}
          echo "RELEASES_TAG2=${RELEASES_BRANCH#*:}" >> ${GITHUB_ENV}
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"
  
      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd imagebuilder
          rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Prepare file First
        run: |
          cd imagebuilder
          echo -e "[\033[95m STEPS \033[0m] Prepare File.."
          mkdir -p compiled_images_${{ env.TAG_NAME }}
          if [[ "${{ env.TARGET_NAME }}" != "amlogic" ]]; then
            for file in bin/targets/*/*/*.img.gz; do mv "$file" compiled_images_${{ env.TAG_NAME }}; done
          else
            for file in bin/targets/*/*/*rootfs.tar.gz; do mv "$file" compiled_images_${{ env.TAG_NAME }}; done
          fi
          echo -e "INFO files list: \n$(ls -l compiled_images_${{ env.TAG_NAME }} 2>/dev/null)"

      - name: Packaging OpenWrt For Amlogic
        run: |
          cd imagebuilder
          if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
            echo -e "[\033[95m STEPS \033[0m] Cloning Ophub Repacking Amlogic"
            git clone --depth 1 https://github.com/tes-rep/amlogic-s9xxx-openwrt.git ophub_builder
            mkdir -p ophub_builder/openwrt-armsr-armv8-generic
            cp -f compiled_images_${{ env.TAG_NAME }}/*rootfs.tar.gz ophub_builder/openwrt-armvirt/
            cd ophub_builder
            sudo ./remake -b ${{ env.openwrt_board }} -k ${{ inputs.openwrt_kernel }} -s ${{ inputs.rootfs_size }}
            for file in openwrt/out/*.img.gz; do cp -f "$file" ../compiled_images_${{ env.TAG_NAME }}; done
          fi

      - name: Prepare Before Uploads
        id: prepare2
        run: |
          cd imagebuilder
          echo -e "${MSG_STEPS} Replace Name"
          search_replace_patterns=(
              "bcm27xx-bcm2710-rpi-3|Raspberry-Pi-3_ext4-sysupgrade"
              "bcm27xx-bcm2711-rpi-4|Raspberry-Pi-4_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r2c|NanoPi_R2C_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r2s|NanoPi_R2S_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r4s|NanoPi_R4S_ext4-sysupgrade"
              "rockchip-armv8-xunlong_orangepi-r1-plus|Orange-Pi-R1_ext4-sysupgrade"
              "rockchip-armv8-xunlong_orangepi-r1-plus-lts|Orange-Pi-R1-Plus-LTS_ext4-sysupgrade"
              "x86-64-generic-ext4-combined-efi|x86-64-Generic_ext4-combined-efi"
              "x86-64-generic-ext4-combined|x86-64-Generic_ext4-combined"
              "_amlogic_s905x_|Amlogic_HG680P"
              "_amlogic_s905x-b860h_|Amlogic_B860HV1-V2"
              "_amlogic_s905x2_|Amlogic_B860HV5"
              "_amlogic_s905x4-advan_|s905x4-advan"
              "_amlogic_s905x2-hg680-fj_|amlogic_s905x2-hg680-fj"
          )       
          for pattern in "${search_replace_patterns[@]}"; do
              search="${pattern%%|*}"
              replace="${pattern##*|}"

           # Process .img.gz files
          for file in compiled_images_${{ env.TAG_NAME }}/*${search}*.img.gz; do
                  [[ -f "$file" ]] || continue
                  kernel=""
                  if [[ "$file" =~ k[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9-]+)? ]]; then
                  kernel="${BASH_REMATCH[0]}"
            fi
             new_name="HOUJIE-WRT_${{ env.RELEASES_TAG2 }}_${replace}_${kernel}.img.gz"
            echo -e "${INFO} Renaming: $file → $new_name"
            mv "$file" "compiled_images_${{ env.TAG_NAME }}/$new_name" || echo -e "${WARNING} Failed to rename $file"
           done

           # Process .tar.gz files
           for file in compiled_images_${{ env.TAG_NAME }}/*${search}*.tar.gz; do
            [[ -f "$file" ]] || continue
             new_name="HOUJIE-WRT_${{ env.RELEASES_TAG2 }}_${replace}.tar.gz"
            echo -e "${INFO} Renaming: $file → $new_name"
            mv "$file" "compiled_images_${{ env.TAG_NAME }}/$new_name" || echo -e "${WARNING} Failed to rename $file"
           done
           done
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "${MSG_SUCCESS} Status: Success"
          echo -e "INFO files list: \n$(ls -l compiled_images 2>/dev/null)"
  
      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@main
        if: ${{ steps.prepare2.outputs.status }} == 'success' && !cancelled()
        with:
          tag: HOUJIE-Wrt_${{ env.RELEASES_TAG2 }}-${{ github.ref_name }}
          artifacts: imagebuilder/compiled_images_${{ env.TAG_NAME }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          prerelease: ${{ inputs.upload-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: sijitekowolu
            - Default WIFI name: NOKIA N73 | NOKIA N73_5G
            - Default WIFI password: sijitekowolu
            ###   Firmware Details : 
              - Tanggal Build: ${{ steps.date.outputs.date }}
              - Devices type : ${{ inputs.target }}
              - Kernel version : ${{ inputs.openwrt_kernel }}
              - Kernel version : $kernel
              - ROOTFS File : ${{ inputs.releases_branch }}
              - ROOTFS Size : ${{ inputs.rootfs_size }}
